Confiuration:
  # 用来指定log4j本身的打印日志的级别，8个级别：ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF
  status: warn
  # 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s
  monitorinterval: 30

  # 定义全局变量
  Properties:
    Property:
    # 控制台输出级别
    - name: LOG.LEVEL.CONSOLE
      value: info
    # 日志存储位置
    - name: LOG_PATH
      value: log/app
    - name: LOG_ERROR_PATH
      value: log/error
    # 日志格式
    - name: LOG.PATTERN
      value: "%d{yyyy-MM-dd HH:mm:ss SSS} [%t] %-5p [%highlight{%level}] %c{1}: %L : %m%n"

  # 日志管道（保存在哪）
  Appenders:
    # 输出到控制台
    Console:
      name: CONSOLE
      target: SYSTEM_OUT
      PatternLayout:
        pattern: ${LOG.PATTERN}
    # 输出到文件（用来定义超过指定大小自动删除旧的创建新的的Appender）
    RollingFile:
    # 普通日志
    - name: ROLLING_FILE
      # 指定输出日志的目的文件带全路径的文件名（当前使用中的）
      fileName: ${LOG_PATH}/app.log
      # 指定新建日志文件的名称格式（历史日志文件）
      filePattern: "${LOG_PATH}/farm-%d{yyyy-MM-dd}-%i.log"
      PatternLayout:
        pattern: ${LOG.PATTERN}
      # 指定滚动日志的策略（何时进行新建日志文件输出日志）
      Policies:
        # 基于时间的滚动策略
        # TimeBasedTriggeringPolicy:
        SizeBasedTriggeringPolicy:
          size: "10 MB"
        # 用于调整时间
        #modulate: true
        # 按天保存
        #interval: 1
      # 正确的使用姿势：定期删除旧的日志（https://logging.apache.org/log4j/2.x/manual/appenders.html#RollingFileAppender）
      DefaultRolloverStrategy:
      #  max: 3
      # 删除 age 所代表的之前的日志（如3分钟）
        Delete:
          basePath: ${LOG_PATH}
        # 日志就在path下，所以deep为1
          maxDeepth: 1
          IfFileName:
            - glob: farm-*.log
          IfLastModified:
           - age: 7d
#            - age: 3m
      # 异常日志
    - name: ERROR_FILE
      fileName: ${LOG_ERROR_PATH}/error.log
      filePattern: "${LOG_ERROR_PATH}/error-%d{yyyy-MM-dd}-%i.log"
      PatternLayout:
        pattern: ${LOG.PATTERN}
      Policies:
          # 基于指定文件大小的滚动策略（按文件大小保存）
        SizeBasedTriggeringPolicy:
            size: "50 MB"
        # 控制某时间段内文件的数目，如果没有控制好，之前的日志塞满后，后面的不会增加（建议不使用）
        DefaultRolloverStrategy:
          max: 10

  # 路由器
  Loggers:
    Root:
      # 控制输出级别
      level: ${LOG.LEVEL.CONSOLE}
      # 用来指定该日志输出到哪个Appender（指定日志流向哪个管道）
      AppenderRef:
      - ref: CONSOLE
      - ref: ROLLING_FILE
        level: info
      - ref: ERROR_FILE
        level: error